// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace DRXLibrary.Generated.Resolvers
{
    using System;

    public class DRXLibraryGeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new DRXLibraryGeneratedResolver();

        private DRXLibraryGeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = DRXLibraryGeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class DRXLibraryGeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static DRXLibraryGeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(17)
            {
                { typeof(global::System.Collections.Generic.List<global::CoreLibrary.Models.Crypto.CryptoKeyProtectorAssociation>), 0 },
                { typeof(global::System.Collections.Generic.List<global::DRXLibrary.Models.Drx.DrxFlag>), 1 },
                { typeof(global::System.Collections.Generic.List<global::DRXLibrary.Models.Drx.Store.LocalDrxStore>), 2 },
                { typeof(global::System.Collections.Generic.List<global::System.Guid>), 3 },
                { typeof(object[]), 4 },
                { typeof(global::CoreLibrary.Models.Crypto.CryptoKeyProtectorIntent), 5 },
                { typeof(global::DRXLibrary.Models.Drx.DrxBodyType), 6 },
                { typeof(global::DRXLibrary.Models.Drx.DrxSecurityLevel), 7 },
                { typeof(global::CoreLibrary.Models.Crypto.CryptoKey), 8 },
                { typeof(global::CoreLibrary.Models.Crypto.CryptoKeyProtector), 9 },
                { typeof(global::CoreLibrary.Models.Crypto.CryptoKeyProtectorAssociation), 10 },
                { typeof(global::DRXLibrary.Models.Drx.Document.DrxDocumentHeader), 11 },
                { typeof(global::DRXLibrary.Models.Drx.Document.DrxDocumentVrel), 12 },
                { typeof(global::DRXLibrary.Models.Drx.DrxFlag), 13 },
                { typeof(global::DRXLibrary.Models.Drx.DrxFlagColour), 14 },
                { typeof(global::DRXLibrary.Models.Drx.Store.DrxStoreCache), 15 },
                { typeof(global::DRXLibrary.Models.Drx.Store.LocalDrxStore), 16 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ListFormatter<global::CoreLibrary.Models.Crypto.CryptoKeyProtectorAssociation>();
                case 1: return new global::MessagePack.Formatters.ListFormatter<global::DRXLibrary.Models.Drx.DrxFlag>();
                case 2: return new global::MessagePack.Formatters.ListFormatter<global::DRXLibrary.Models.Drx.Store.LocalDrxStore>();
                case 3: return new global::MessagePack.Formatters.ListFormatter<global::System.Guid>();
                case 4: return new global::MessagePack.Formatters.ArrayFormatter<object>();
                case 5: return new DRXLibrary.Generated.Formatters.CoreLibrary.Models.Crypto.CryptoKeyProtectorIntentFormatter();
                case 6: return new DRXLibrary.Generated.Formatters.DRXLibrary.Models.Drx.DrxBodyTypeFormatter();
                case 7: return new DRXLibrary.Generated.Formatters.DRXLibrary.Models.Drx.DrxSecurityLevelFormatter();
                case 8: return new DRXLibrary.Generated.Formatters.CoreLibrary.Models.Crypto.CryptoKeyFormatter();
                case 9: return new DRXLibrary.Generated.Formatters.CoreLibrary.Models.Crypto.CryptoKeyProtectorFormatter();
                case 10: return new DRXLibrary.Generated.Formatters.CoreLibrary.Models.Crypto.CryptoKeyProtectorAssociationFormatter();
                case 11: return new DRXLibrary.Generated.Formatters.DRXLibrary.Models.Drx.Document.DrxDocumentHeaderFormatter();
                case 12: return new DRXLibrary.Generated.Formatters.DRXLibrary.Models.Drx.Document.DrxDocumentVrelFormatter();
                case 13: return new DRXLibrary.Generated.Formatters.DRXLibrary.Models.Drx.DrxFlagFormatter();
                case 14: return new DRXLibrary.Generated.Formatters.DRXLibrary.Models.Drx.DrxFlagColourFormatter();
                case 15: return new DRXLibrary.Generated.Formatters.DRXLibrary.Models.Drx.Store.DrxStoreCacheFormatter();
                case 16: return new DRXLibrary.Generated.Formatters.DRXLibrary.Models.Drx.Store.LocalDrxStoreFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace DRXLibrary.Generated.Formatters.CoreLibrary.Models.Crypto
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class CryptoKeyProtectorIntentFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::CoreLibrary.Models.Crypto.CryptoKeyProtectorIntent>
    {
        public void Serialize(ref MessagePackWriter writer, global::CoreLibrary.Models.Crypto.CryptoKeyProtectorIntent value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::CoreLibrary.Models.Crypto.CryptoKeyProtectorIntent Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::CoreLibrary.Models.Crypto.CryptoKeyProtectorIntent)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace DRXLibrary.Generated.Formatters.DRXLibrary.Models.Drx
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class DrxBodyTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::DRXLibrary.Models.Drx.DrxBodyType>
    {
        public void Serialize(ref MessagePackWriter writer, global::DRXLibrary.Models.Drx.DrxBodyType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((UInt16)value);
        }

        public global::DRXLibrary.Models.Drx.DrxBodyType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::DRXLibrary.Models.Drx.DrxBodyType)reader.ReadUInt16();
        }
    }

    public sealed class DrxSecurityLevelFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::DRXLibrary.Models.Drx.DrxSecurityLevel>
    {
        public void Serialize(ref MessagePackWriter writer, global::DRXLibrary.Models.Drx.DrxSecurityLevel value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::DRXLibrary.Models.Drx.DrxSecurityLevel Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::DRXLibrary.Models.Drx.DrxSecurityLevel)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name



// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace DRXLibrary.Generated.Formatters.CoreLibrary.Models.Crypto
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class CryptoKeyFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::CoreLibrary.Models.Crypto.CryptoKey>
    {

        public void Serialize(ref MessagePackWriter writer, global::CoreLibrary.Models.Crypto.CryptoKey value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.KeyId, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::CoreLibrary.Models.Crypto.CryptoKeyProtectorAssociation>>().Serialize(ref writer, value.Protectors, options);
        }

        public global::CoreLibrary.Models.Crypto.CryptoKey Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __KeyId__ = default(global::System.Guid);
            var __Protectors__ = default(global::System.Collections.Generic.List<global::CoreLibrary.Models.Crypto.CryptoKeyProtectorAssociation>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __KeyId__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Protectors__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::CoreLibrary.Models.Crypto.CryptoKeyProtectorAssociation>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::CoreLibrary.Models.Crypto.CryptoKey();
            ____result.KeyId = __KeyId__;
            ____result.Protectors = __Protectors__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CryptoKeyProtectorFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::CoreLibrary.Models.Crypto.CryptoKeyProtector>
    {

        public void Serialize(ref MessagePackWriter writer, global::CoreLibrary.Models.Crypto.CryptoKeyProtector value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            value.OnBeforeSerialize();
            writer.WriteArrayHeader(3);
            writer.Write(value.ProtectorKey);
            formatterResolver.GetFormatterWithVerify<object[]>().Serialize(ref writer, value.ProtectorState, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ProtectorName, options);
        }

        public global::CoreLibrary.Models.Crypto.CryptoKeyProtector Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __ProtectorKey__ = default(byte[]);
            var __ProtectorState__ = default(object[]);
            var __ProtectorName__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __ProtectorKey__ = reader.ReadBytes()?.ToArray();
                        break;
                    case 1:
                        __ProtectorState__ = formatterResolver.GetFormatterWithVerify<object[]>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __ProtectorName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::CoreLibrary.Models.Crypto.CryptoKeyProtector();
            ____result.ProtectorKey = __ProtectorKey__;
            ____result.ProtectorState = __ProtectorState__;
            ____result.ProtectorName = __ProtectorName__;
            ____result.OnAfterDeserialize();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CryptoKeyProtectorAssociationFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::CoreLibrary.Models.Crypto.CryptoKeyProtectorAssociation>
    {

        public void Serialize(ref MessagePackWriter writer, global::CoreLibrary.Models.Crypto.CryptoKeyProtectorAssociation value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::CoreLibrary.Models.Crypto.CryptoKeyProtectorIntent>().Serialize(ref writer, value.Intent, options);
            formatterResolver.GetFormatterWithVerify<global::CoreLibrary.Models.Crypto.CryptoKeyProtector>().Serialize(ref writer, value.Protector, options);
        }

        public global::CoreLibrary.Models.Crypto.CryptoKeyProtectorAssociation Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Intent__ = default(global::CoreLibrary.Models.Crypto.CryptoKeyProtectorIntent);
            var __Protector__ = default(global::CoreLibrary.Models.Crypto.CryptoKeyProtector);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Intent__ = formatterResolver.GetFormatterWithVerify<global::CoreLibrary.Models.Crypto.CryptoKeyProtectorIntent>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Protector__ = formatterResolver.GetFormatterWithVerify<global::CoreLibrary.Models.Crypto.CryptoKeyProtector>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::CoreLibrary.Models.Crypto.CryptoKeyProtectorAssociation();
            ____result.Intent = __Intent__;
            ____result.Protector = __Protector__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace DRXLibrary.Generated.Formatters.DRXLibrary.Models.Drx.Document
{
    using System;
    using System.Buffers;
    using System.Runtime.InteropServices;
    using MessagePack;

    public sealed class DrxDocumentHeaderFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::DRXLibrary.Models.Drx.Document.DrxDocumentHeader>
    {
        // Title
        private static global::System.ReadOnlySpan<byte> GetSpan_Title() => new byte[1 + 5] { 165, 84, 105, 116, 108, 101 };
        // TimeStamp
        private static global::System.ReadOnlySpan<byte> GetSpan_TimeStamp() => new byte[1 + 9] { 169, 84, 105, 109, 101, 83, 116, 97, 109, 112 };
        // Vrel
        private static global::System.ReadOnlySpan<byte> GetSpan_Vrel() => new byte[1 + 4] { 164, 86, 114, 101, 108 };
        // Flags
        private static global::System.ReadOnlySpan<byte> GetSpan_Flags() => new byte[1 + 5] { 165, 70, 108, 97, 103, 115 };
        // Store
        private static global::System.ReadOnlySpan<byte> GetSpan_Store() => new byte[1 + 5] { 165, 83, 116, 111, 114, 101 };
        // Encrypted
        private static global::System.ReadOnlySpan<byte> GetSpan_Encrypted() => new byte[1 + 9] { 169, 69, 110, 99, 114, 121, 112, 116, 101, 100 };
        // Key
        private static global::System.ReadOnlySpan<byte> GetSpan_Key() => new byte[1 + 3] { 163, 75, 101, 121 };
        // SecurityLevel
        private static global::System.ReadOnlySpan<byte> GetSpan_SecurityLevel() => new byte[1 + 13] { 173, 83, 101, 99, 117, 114, 105, 116, 121, 76, 101, 118, 101, 108 };
        // BodyType
        private static global::System.ReadOnlySpan<byte> GetSpan_BodyType() => new byte[1 + 8] { 168, 66, 111, 100, 121, 84, 121, 112, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::DRXLibrary.Models.Drx.Document.DrxDocumentHeader value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(9);
            writer.WriteRaw(GetSpan_Title());
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Title, options);
            writer.WriteRaw(GetSpan_TimeStamp());
            formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Serialize(ref writer, value.TimeStamp, options);
            writer.WriteRaw(GetSpan_Vrel());
            formatterResolver.GetFormatterWithVerify<global::DRXLibrary.Models.Drx.Document.DrxDocumentVrel>().Serialize(ref writer, value.Vrel, options);
            writer.WriteRaw(GetSpan_Flags());
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Guid>>().Serialize(ref writer, value.Flags, options);
            writer.WriteRaw(GetSpan_Store());
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.Store, options);
            writer.WriteRaw(GetSpan_Encrypted());
            writer.Write(value.Encrypted);
            writer.WriteRaw(GetSpan_Key());
            formatterResolver.GetFormatterWithVerify<global::CoreLibrary.Models.Crypto.CryptoKey>().Serialize(ref writer, value.Key, options);
            writer.WriteRaw(GetSpan_SecurityLevel());
            formatterResolver.GetFormatterWithVerify<global::DRXLibrary.Models.Drx.DrxSecurityLevel>().Serialize(ref writer, value.SecurityLevel, options);
            writer.WriteRaw(GetSpan_BodyType());
            formatterResolver.GetFormatterWithVerify<global::DRXLibrary.Models.Drx.DrxBodyType>().Serialize(ref writer, value.BodyType, options);
        }

        public global::DRXLibrary.Models.Drx.Document.DrxDocumentHeader Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Title__ = default(string);
            var __TimeStamp__ = default(global::System.DateTimeOffset);
            var __Vrel__ = default(global::DRXLibrary.Models.Drx.Document.DrxDocumentVrel);
            var __Flags__ = default(global::System.Collections.Generic.List<global::System.Guid>);
            var __Store__ = default(global::System.Guid);
            var __Encrypted__ = default(bool);
            var __Key__ = default(global::CoreLibrary.Models.Crypto.CryptoKey);
            var __SecurityLevel__ = default(global::DRXLibrary.Models.Drx.DrxSecurityLevel);
            var __BodyType__ = default(global::DRXLibrary.Models.Drx.DrxBodyType);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 435611265364UL:
                                __Title__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                                continue;
                            case 495655676998UL:
                                __Flags__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Guid>>().Deserialize(ref reader, options);
                                continue;
                            case 435711603795UL:
                                __Store__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                                continue;
                        }
                    case 9:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7881708724407855444UL:
                                if (stringKey[0] != 112) { goto FAIL; }

                                __TimeStamp__ = formatterResolver.GetFormatterWithVerify<global::System.DateTimeOffset>().Deserialize(ref reader, options);
                                continue;

                            case 7310591762041630277UL:
                                if (stringKey[0] != 100) { goto FAIL; }

                                __Encrypted__ = reader.ReadBoolean();
                                continue;

                        }
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1818587734UL) { goto FAIL; }

                        __Vrel__ = formatterResolver.GetFormatterWithVerify<global::DRXLibrary.Models.Drx.Document.DrxDocumentVrel>().Deserialize(ref reader, options);
                        continue;
                    case 3:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7955787UL) { goto FAIL; }

                        __Key__ = formatterResolver.GetFormatterWithVerify<global::CoreLibrary.Models.Crypto.CryptoKey>().Deserialize(ref reader, options);
                        continue;
                    case 13:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_SecurityLevel().Slice(1))) { goto FAIL; }

                        __SecurityLevel__ = formatterResolver.GetFormatterWithVerify<global::DRXLibrary.Models.Drx.DrxSecurityLevel>().Deserialize(ref reader, options);
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7309475598943153986UL) { goto FAIL; }

                        __BodyType__ = formatterResolver.GetFormatterWithVerify<global::DRXLibrary.Models.Drx.DrxBodyType>().Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::DRXLibrary.Models.Drx.Document.DrxDocumentHeader()
            {
                Title = __Title__,
                TimeStamp = __TimeStamp__,
                Vrel = __Vrel__,
                Flags = __Flags__,
                Store = __Store__,
                Encrypted = __Encrypted__,
                Key = __Key__,
                SecurityLevel = __SecurityLevel__,
                BodyType = __BodyType__,
            };

            reader.Depth--;
            return ____result;
        }
    }
}

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace DRXLibrary.Generated.Formatters.DRXLibrary.Models.Drx.Document
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class DrxDocumentVrelFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::DRXLibrary.Models.Drx.Document.DrxDocumentVrel>
    {

        public void Serialize(ref MessagePackWriter writer, global::DRXLibrary.Models.Drx.Document.DrxDocumentVrel value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(4);
            writer.Write(value.Vividity);
            writer.Write(value.Remembrance);
            writer.Write(value.Emotion);
            writer.Write(value.Length);
        }

        public global::DRXLibrary.Models.Drx.Document.DrxDocumentVrel Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __Vividity__ = default(double);
            var __Remembrance__ = default(double);
            var __Emotion__ = default(double);
            var __Length__ = default(double);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Vividity__ = reader.ReadDouble();
                        break;
                    case 1:
                        __Remembrance__ = reader.ReadDouble();
                        break;
                    case 2:
                        __Emotion__ = reader.ReadDouble();
                        break;
                    case 3:
                        __Length__ = reader.ReadDouble();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::DRXLibrary.Models.Drx.Document.DrxDocumentVrel();
            ____result.Vividity = __Vividity__;
            ____result.Remembrance = __Remembrance__;
            ____result.Emotion = __Emotion__;
            ____result.Length = __Length__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace DRXLibrary.Generated.Formatters.DRXLibrary.Models.Drx
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class DrxFlagFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::DRXLibrary.Models.Drx.DrxFlag>
    {

        public void Serialize(ref MessagePackWriter writer, global::DRXLibrary.Models.Drx.DrxFlag value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.Id, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Tag, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            formatterResolver.GetFormatterWithVerify<global::DRXLibrary.Models.Drx.DrxFlagColour>().Serialize(ref writer, value.Colour, options);
            formatterResolver.GetFormatterWithVerify<global::DRXLibrary.Models.Drx.DrxSecurityLevel>().Serialize(ref writer, value.SecurityLevel, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Description, options);
        }

        public global::DRXLibrary.Models.Drx.DrxFlag Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Id__ = default(global::System.Guid);
            var __Tag__ = default(string);
            var __Name__ = default(string);
            var __Description__ = default(string);
            var __Colour__ = default(global::DRXLibrary.Models.Drx.DrxFlagColour);
            var __SecurityLevel__ = default(global::DRXLibrary.Models.Drx.DrxSecurityLevel);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Id__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Tag__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Description__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Colour__ = formatterResolver.GetFormatterWithVerify<global::DRXLibrary.Models.Drx.DrxFlagColour>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __SecurityLevel__ = formatterResolver.GetFormatterWithVerify<global::DRXLibrary.Models.Drx.DrxSecurityLevel>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::DRXLibrary.Models.Drx.DrxFlag();
            ____result.Id = __Id__;
            ____result.Tag = __Tag__;
            ____result.Name = __Name__;
            ____result.Description = __Description__;
            ____result.Colour = __Colour__;
            ____result.SecurityLevel = __SecurityLevel__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DrxFlagColourFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::DRXLibrary.Models.Drx.DrxFlagColour>
    {

        public void Serialize(ref MessagePackWriter writer, global::DRXLibrary.Models.Drx.DrxFlagColour value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(4);
            writer.Write(value.A);
            writer.Write(value.R);
            writer.Write(value.G);
            writer.Write(value.B);
        }

        public global::DRXLibrary.Models.Drx.DrxFlagColour Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var __A__ = default(byte);
            var __R__ = default(byte);
            var __G__ = default(byte);
            var __B__ = default(byte);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __A__ = reader.ReadByte();
                        break;
                    case 1:
                        __R__ = reader.ReadByte();
                        break;
                    case 2:
                        __G__ = reader.ReadByte();
                        break;
                    case 3:
                        __B__ = reader.ReadByte();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::DRXLibrary.Models.Drx.DrxFlagColour();
            ____result.A = __A__;
            ____result.R = __R__;
            ____result.G = __G__;
            ____result.B = __B__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace DRXLibrary.Generated.Formatters.DRXLibrary.Models.Drx.Store
{
    using System;
    using System.Buffers;
    using System.Runtime.InteropServices;
    using MessagePack;

    public sealed class DrxStoreCacheFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::DRXLibrary.Models.Drx.Store.DrxStoreCache>
    {
        // Stores
        private static global::System.ReadOnlySpan<byte> GetSpan_Stores() => new byte[1 + 6] { 166, 83, 116, 111, 114, 101, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::DRXLibrary.Models.Drx.Store.DrxStoreCache value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Stores());
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::DRXLibrary.Models.Drx.Store.LocalDrxStore>>().Serialize(ref writer, value.Stores, options);
        }

        public global::DRXLibrary.Models.Drx.Store.DrxStoreCache Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Stores__ = default(global::System.Collections.Generic.List<global::DRXLibrary.Models.Drx.Store.LocalDrxStore>);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 126879548798035UL) { goto FAIL; }

                        __Stores__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::DRXLibrary.Models.Drx.Store.LocalDrxStore>>().Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::DRXLibrary.Models.Drx.Store.DrxStoreCache()
            {
                Stores = __Stores__,
            };

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class LocalDrxStoreFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::DRXLibrary.Models.Drx.Store.LocalDrxStore>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // Encrypted
        private static global::System.ReadOnlySpan<byte> GetSpan_Encrypted() => new byte[1 + 9] { 169, 69, 110, 99, 114, 121, 112, 116, 101, 100 };
        // Key
        private static global::System.ReadOnlySpan<byte> GetSpan_Key() => new byte[1 + 3] { 163, 75, 101, 121 };
        // FlagDefinitions
        private static global::System.ReadOnlySpan<byte> GetSpan_FlagDefinitions() => new byte[1 + 15] { 175, 70, 108, 97, 103, 68, 101, 102, 105, 110, 105, 116, 105, 111, 110, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::DRXLibrary.Models.Drx.Store.LocalDrxStore value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(GetSpan_Id());
            formatterResolver.GetFormatterWithVerify<global::System.Guid>().Serialize(ref writer, value.Id, options);
            writer.WriteRaw(GetSpan_Name());
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_Encrypted());
            writer.Write(value.Encrypted);
            writer.WriteRaw(GetSpan_Key());
            formatterResolver.GetFormatterWithVerify<global::CoreLibrary.Models.Crypto.CryptoKey>().Serialize(ref writer, value.Key, options);
            writer.WriteRaw(GetSpan_FlagDefinitions());
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::DRXLibrary.Models.Drx.DrxFlag>>().Serialize(ref writer, value.FlagDefinitions, options);
        }

        public global::DRXLibrary.Models.Drx.Store.LocalDrxStore Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(global::System.Guid);
            var __Name__ = default(string);
            var __Encrypted__ = default(bool);
            var __Key__ = default(global::CoreLibrary.Models.Crypto.CryptoKey);
            var __FlagDefinitions__ = default(global::System.Collections.Generic.List<global::DRXLibrary.Models.Drx.DrxFlag>);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        __Id__ = formatterResolver.GetFormatterWithVerify<global::System.Guid>().Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701667150UL) { goto FAIL; }

                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_Encrypted().Slice(1))) { goto FAIL; }

                        __Encrypted__ = reader.ReadBoolean();
                        continue;
                    case 3:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7955787UL) { goto FAIL; }

                        __Key__ = formatterResolver.GetFormatterWithVerify<global::CoreLibrary.Models.Crypto.CryptoKey>().Deserialize(ref reader, options);
                        continue;
                    case 15:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_FlagDefinitions().Slice(1))) { goto FAIL; }

                        __FlagDefinitions__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::DRXLibrary.Models.Drx.DrxFlag>>().Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::DRXLibrary.Models.Drx.Store.LocalDrxStore()
            {
                Id = __Id__,
                Name = __Name__,
                Encrypted = __Encrypted__,
                Key = __Key__,
                FlagDefinitions = __FlagDefinitions__,
            };

            reader.Depth--;
            return ____result;
        }
    }
}

